{"version":3,"sources":["providers/todos.js","hooks/useOnEnter.js","components/newTodo.js","helpers/guid.js","components/todoItem.js","hooks/useDoubleClick.js","components/todoList.js","components/footer.js","app.js","serviceWorker.js","index.js"],"names":["actions","clearCompleted","getState","dispatch","ids","byId","forEach","id","done","hoaxResourceActions","removeResource","completeAll","updateResource","makeCollectionHoax","resourceOptions","getInitialState","label","callback","useCallback","event","key","preventDefault","NewTodo","useState","setValue","onChange","target","value","onAdd","Todos","useAction","onKeyPress","useOnEnter","s4","Math","random","toString","substring","guid","className","placeholder","TodoItem","useMember","fieldKey","resourceId","setLabel","setDone","onDone","checked","remove","onDelete","editing","setEditing","handleViewClick","onClick","onDoubleClick","timeout","clicks","rest","push","Date","getTime","clearTimeout","setTimeout","length","useDoubleClick","finishedCallback","trim","onEnter","ref","useRef","useOnClickOutside","type","autoFocus","todosSelector","doneIds","leftIds","isActive","isCurrent","TodoList","status","useSelector","leftSize","doneSize","visibleIds","useMemo","Fragment","htmlFor","map","to","getProps","Footer","href","App","Provider","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b3858987.chunk.js","sourcesContent":["import { makeCollectionHoax, hoaxResourceActions } from \"react-hoax\";\n\nconst actions = {\n  clearCompleted: () => (getState, dispatch) => {\n    const { ids, byId } = getState();\n\n    ids.forEach((id) => {\n      const todo = byId[id];\n      if (todo.done) dispatch(hoaxResourceActions.removeResource(id));\n    });\n  },\n  completeAll: () => (getState, dispatch) => {\n    const { ids, byId } = getState();\n\n    ids.forEach((id) => {\n      const todo = byId[id];\n      if (!todo.done)\n        dispatch(hoaxResourceActions.updateResource(id, \"done\", true));\n    });\n  },\n};\n\nexport default makeCollectionHoax(\"todos\", {\n  actions,\n  resourceOptions: {\n    getInitialState: () => ({ id: null, label: \"\", done: false }),\n  },\n});\n","import { useCallback } from \"react\";\n\nexport default (callback) =>\n  useCallback(\n    (event) => {\n      if (event.key !== \"Enter\") return;\n\n      event.preventDefault();\n      callback(event);\n    },\n    [callback]\n  );\n","import React, { useCallback, useState } from \"react\";\nimport Todos from \"../providers/todos\";\n\nimport guid from \"../helpers/guid\";\nimport useOnEnter from \"../hooks/useOnEnter\";\n\nconst NewTodo = () => {\n  const [label, setValue] = useState(\"\");\n  const onChange = useCallback((event) => setValue(event.target.value), [\n    setValue,\n  ]);\n\n  const onAdd = Todos.useAction(\"initializeResource\");\n\n  const onKeyPress = useOnEnter(() => {\n    if (!label) return;\n\n    const id = guid();\n    onAdd(id, { label, id });\n    setValue(\"\");\n  }, [label]);\n\n  return (\n    <input\n      className=\"new-todo\"\n      placeholder=\"What needs to be done?\"\n      onKeyPress={onKeyPress}\n      value={label}\n      onChange={onChange}\n    />\n  );\n};\n\nexport default NewTodo;\n","export default () => {\n  var s4 = () =>\n    (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n\n  return `${s4()}${s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;\n};\n","import React, { useCallback, useRef, useState } from \"react\";\nimport Todos from \"../providers/todos\";\nimport useOnClickOutside from \"use-onclickoutside\";\n\nimport useDoubleClick from \"../hooks/useDoubleClick\";\nimport useOnEnter from \"../hooks/useOnEnter\";\n\nconst TodoItem = ({ id }) => {\n  const [label, setLabel] = Todos.useMember({\n    fieldKey: \"label\",\n    resourceId: id,\n  });\n  const onChange = useCallback((event) => setLabel(event.target.value), [\n    setLabel,\n  ]);\n\n  const [done, setDone] = Todos.useMember({ fieldKey: \"done\", resourceId: id });\n  const onDone = useCallback((event) => setDone(event.target.checked), [\n    setDone,\n  ]);\n\n  const remove = Todos.useAction(\"removeResource\");\n  const onDelete = useCallback(() => remove(id), [id, remove]);\n\n  const [editing, setEditing] = useState(false);\n\n  const handleViewClick = useDoubleClick(null, () => setEditing(true));\n  const finishedCallback = useCallback(() => {\n    setEditing(false);\n    const value = label.trim();\n    value ? setLabel(value) : setTimeout(() => remove(id));\n  }, [id, setLabel, label, remove]);\n\n  const onEnter = useOnEnter(finishedCallback, []);\n  const ref = useRef();\n  useOnClickOutside(ref, finishedCallback);\n\n  return (\n    <li\n      onClick={handleViewClick}\n      className={`${editing ? \"editing\" : \"\"} ${done ? \"completed\" : \"\"}`}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={done}\n          onChange={onDone}\n          autoFocus\n        />\n        <label>{label}</label>\n        <button className=\"destroy\" onClick={onDelete} />\n      </div>\n      {editing && (\n        <input\n          ref={ref}\n          className=\"edit\"\n          value={label}\n          onChange={onChange}\n          onKeyPress={onEnter}\n          autoFocus\n        />\n      )}\n    </li>\n  );\n};\n\nexport default TodoItem;\n","export default (onClick, onDoubleClick) => {\n  let clicks = [];\n  let timeout;\n\n  return (event, ...rest) => {\n    clicks.push(new Date().getTime());\n\n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      if (\n        clicks.length > 1 &&\n        clicks[clicks.length - 1] - clicks[clicks.length - 2] < 250\n      ) {\n        if (onDoubleClick) {\n          onDoubleClick(event, ...rest);\n        }\n      } else if (onClick) {\n        onClick(event, ...rest);\n      }\n      clicks = [];\n    }, 250);\n  };\n};\n","import React, { useMemo } from \"react\";\nimport Todos from \"../providers/todos\";\nimport { Link } from \"@reach/router\";\nimport NewTodo from \"./newTodo\";\nimport TodoItem from \"./todoItem\";\n\nconst todosSelector = ({ ids, byId }) => {\n  let doneIds = [];\n  let leftIds = [];\n  ids.forEach((id) =>\n    byId[id].done ? (doneIds = [...doneIds, id]) : (leftIds = [...leftIds, id])\n  );\n\n  return {\n    ids,\n    doneIds,\n    leftIds,\n  };\n};\n\nconst isActive = ({ isCurrent }) =>\n  isCurrent ? { className: \"selected\" } : {};\n\nconst TodoList = ({ status }) => {\n  const { ids, doneIds, leftIds } = Todos.useSelector(todosSelector);\n  const { clearCompleted, completeAll } = Todos.useAction();\n\n  const leftSize = leftIds.length;\n  const doneSize = doneIds.length;\n\n  const visibleIds = useMemo(() => {\n    switch (status) {\n      case \"active\":\n        return leftIds;\n      case \"completed\":\n        return doneIds;\n      default:\n        return ids;\n    }\n  }, [ids, doneIds, leftIds, status]);\n  debugger;\n  return (\n    <React.Fragment>\n      <header className=\"header\">\n        <h1>todos</h1>\n        <NewTodo />\n      </header>\n\n      <section className=\"main\">\n        <input\n          id=\"toggle-all\"\n          type=\"checkbox\"\n          className=\"toggle-all\"\n          checked={doneSize === ids.length}\n          onChange={completeAll}\n        />\n        <label htmlFor=\"toggle-all\" />\n        <ul className=\"todo-list\">\n          {visibleIds.map((id) => (\n            <TodoItem key={id} id={id} />\n          ))}\n        </ul>\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          <strong>{leftSize}</strong> items left\n        </span>\n        <ul className=\"filters\">\n          <li>\n            <Link to=\"/\" getProps={isActive}>\n              All\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/active\" getProps={isActive}>\n              Active\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/completed\" getProps={isActive}>\n              Completed\n            </Link>\n          </li>\n        </ul>\n        {!!doneSize && (\n          <button className=\"clear-completed\" onClick={clearCompleted}>\n            Clear completed\n          </button>\n        )}\n      </footer>\n    </React.Fragment>\n  );\n};\n\nexport default TodoList;\n","import React from \"react\";\n\nconst Footer = () => (\n  <footer className=\"info\">\n    <p>Double-click to edit a todo</p>\n    <p>\n      Created by <a href=\"http://github.com/novykh/\">novykh</a>\n    </p>\n    <p>\n      Part of <a href=\"http://todomvc.com\">TodoMVC</a>\n    </p>\n  </footer>\n);\n\nexport default Footer;\n","import React, { Fragment } from \"react\";\nimport { Router } from \"@reach/router\";\nimport Todos from \"./providers/todos\";\nimport TodoList from \"./components/todoList\";\nimport Footer from \"./components/footer\";\n\nimport \"todomvc-app-css/index.css\";\n\nconst App = () => (\n  <Fragment>\n    <Todos.Provider>\n      <Router>\n        <TodoList path=\"/\" />\n        <TodoList path=\":status\" />\n      </Router>\n    </Todos.Provider>\n    <Footer />\n  </Fragment>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}